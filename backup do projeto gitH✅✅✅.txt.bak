activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<ScrollView
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_height="match_parent"
     android:layout_width="match_parent"
     android:padding="16dp">

    <LinearLayout
         android:layout_height="wrap_content"
         android:layout_width="match_parent"
         android:padding="8dp"
         android:orientation="vertical">

        <TextView
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="16dp"
             android:textSize="20sp"
             android:text="Upload para GitHub"
             android:textStyle="bold" />

        <com.google.android.material.textfield.TextInputLayout
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="8dp"
             app:hintEnabled="true">

            <com.google.android.material.textfield.TextInputEditText
                 android:layout_height="wrap_content"
                 android:layout_width="match_parent"
                 android:hint="Repositório (usuário/repo)"
                 android:inputType="text"
                 android:id="@+id/editTextRepoName" />

        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="8dp">

            <com.google.android.material.textfield.TextInputEditText
                 android:layout_height="wrap_content"
                 android:layout_width="match_parent"
                 android:hint="Branch"
                 android:inputType="text"
                 android:id="@+id/editTextBranch" />

        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="8dp">

            <com.google.android.material.textfield.TextInputEditText
                 android:layout_height="wrap_content"
                 android:layout_width="match_parent"
                 android:hint="Token de Acesso GitHub"
                 android:inputType="textPassword"
                 android:id="@+id/editTextToken" />

        </com.google.android.material.textfield.TextInputLayout>

        <Button
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="8dp"
             android:id="@+id/buttonSelectFile"
             android:text="Selecionar Arquivo" />

        <com.google.android.material.textfield.TextInputLayout
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="8dp">

            <com.google.android.material.textfield.TextInputEditText
                 android:layout_height="wrap_content"
                 android:layout_width="match_parent"
                 android:hint="Caminho do arquivo"
                 android:enabled="false"
                 android:inputType="text"
                 android:id="@+id/editTextFilePath" />

        </com.google.android.material.textfield.TextInputLayout>

        <Button
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:layout_marginBottom="16dp"
             android:id="@+id/buttonUpload"
             android:text="Enviar para GitHub" />

        <ProgressBar
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:visibility="gone"
             android:indeterminate="true"
             style="?android:attr/progressBarStyleHorizontal"
             android:id="@+id/progressBar" />

        <TextView
             android:layout_height="wrap_content"
             android:layout_width="match_parent"
             android:textSize="14sp"
             android:textColor="#333333"
             android:layout_marginTop="16dp"
             android:id="@+id/textViewResult" />

    </LinearLayout>

</ScrollView>



Mainactivity.kt

package com.example.gith

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.OpenableColumns
import android.util.Base64
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.gith.databinding.ActivityMainBinding
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    private val PICK_FILE_REQUEST_CODE = 100
    private var tempFile: File? = null
    
    private val githubService by lazy {
        Retrofit.Builder()
            .baseUrl("https://api.github.com/")
            .client(OkHttpClient.Builder()
                .addInterceptor(HttpLoggingInterceptor().apply {
                    level = HttpLoggingInterceptor.Level.BODY
                })
                .build())
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(GitHubUploadService::class.java)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Configuração inicial
        binding.editTextRepoName.setText("seu_usuario/seu_repositorio")
        binding.editTextBranch.setText("main")
        binding.editTextToken.setText("seu_token_github")

        binding.buttonSelectFile.setOnClickListener {
            openFilePicker()
        }

        binding.buttonUpload.setOnClickListener {
            if (validateInputs()) {
                uploadFileToGithub(
                    binding.editTextFilePath.text?.toString() ?: "",
                    binding.editTextRepoName.text?.toString()?.trim() ?: "",
                    binding.editTextBranch.text?.toString()?.trim() ?: "",
                    binding.editTextToken.text?.toString()?.trim() ?: ""
                )
            }
        }
    }

    private fun validateInputs(): Boolean {
        return when {
            binding.editTextFilePath.text?.toString().isNullOrEmpty() -> {
                showError("Selecione um arquivo!")
                false
            }
            binding.editTextRepoName.text?.toString().isNullOrEmpty() -> {
                showError("Informe o repositório!")
                false
            }
            binding.editTextBranch.text?.toString().isNullOrEmpty() -> {
                showError("Informe a branch!")
                false
            }
            binding.editTextToken.text?.toString().isNullOrEmpty() -> {
                showError("Informe o token de acesso!")
                false
            }
            !binding.editTextRepoName.text?.toString().orEmpty().contains("/") -> {
                showError("Formato inválido! Use: usuario/repositorio")
                false
            }
            else -> true
        }
    }

    private fun openFilePicker() {
        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {
            addCategory(Intent.CATEGORY_OPENABLE)
            type = "*/*"
        }
        startActivityForResult(intent, PICK_FILE_REQUEST_CODE)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == PICK_FILE_REQUEST_CODE && resultCode == RESULT_OK) {
            data?.data?.let { uri ->
                tempFile?.delete()
                tempFile = createTempFileFromUri(uri)
                tempFile?.let {
                    binding.editTextFilePath.setText(it.absolutePath)
                    Log.d("FileUpload", "Arquivo preparado: ${it.name}")
                } ?: showError("Falha ao processar arquivo")
            }
        }
    }

    private fun createTempFileFromUri(uri: Uri): File? {
        return try {
            val inputStream = contentResolver.openInputStream(uri) ?: return null
            val fileName = getFileName(uri) ?: "file_${System.currentTimeMillis()}"
            val file = File(cacheDir, fileName)
            
            FileOutputStream(file).use { output ->
                inputStream.copyTo(output)
            }
            file
        } catch (e: Exception) {
            Log.e("FileUpload", "Erro ao criar arquivo", e)
            null
        }
    }

    private fun getFileName(uri: Uri): String? {
        return contentResolver.query(uri, null, null, null, null)?.use { cursor ->
            cursor.moveToFirst()
            cursor.getString(cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME))
        }
    }
    
    private fun uploadFileToGithub(filePath: String, repo: String, branch: String, token: String) {
        showLoading(true)
        
        try {
            val file = File(filePath)
            if (!file.exists() || file.length() == 0L) {
                showLoading(false)
                showError("Arquivo não encontrado ou vazio!")
                return
            }

            val repoParts = repo.split("/")
            if (repoParts.size != 2) {
                showLoading(false)
                showError("Formato de repositório inválido! Use: usuario/repositorio")
                return
            }
            val owner = repoParts[0]
            val repoName = repoParts[1]

            Log.d("GitHubDebug", "Iniciando upload para $owner/$repoName na branch $branch")

            FileInputStream(file).use { stream ->
                val fileContent = Base64.encodeToString(stream.readBytes(), Base64.NO_WRAP)
                val githubFile = GitHubFile(
                    message = "Upload via Android App - ${file.name}",
                    content = fileContent,
                    branch = branch
                )

                val authToken = "Bearer $token"

                githubService.uploadFile(
                    owner = owner,
                    repo = repoName,
                    path = file.name,
                    token = authToken,
                    file = githubFile
                ).enqueue(object : Callback<GitHubUploadResponse> {
                    override fun onResponse(call: Call<GitHubUploadResponse>, response: Response<GitHubUploadResponse>) {
                        showLoading(false)
                        if (response.isSuccessful) {
                            val result = response.body()
                            binding.textViewResult.text = "✅ Upload concluído!\nArquivo: ${result?.content?.path}\nCommit: ${result?.commit?.sha?.take(7)}"
                            Toast.makeText(
                                this@MainActivity, 
                                "Arquivo enviado com sucesso!", 
                                Toast.LENGTH_SHORT
                            ).show()
                        } else {
                            try {
                                val errorBody = response.errorBody()?.string()
                                val errorMsg = when (response.code()) {
                                    404 -> "Repositório não encontrado (404). Verifique:\n- Nome do repositório\n- Permissões do token\n- Existência da branch"
                                    403 -> "Acesso negado (403). Verifique:\n- Token válido e com permissões\n- Limites da API"
                                    422 -> "Erro de validação (422):\n- Arquivo já existe\n- Branch não existe\n- Tamanho do arquivo excedido"
                                    else -> "Erro ${response.code()}: ${errorBody?.take(200)}"
                                }
                                showError(errorMsg)
                                Log.e("GitHubDebug", "Erro ${response.code()}: $errorBody")
                            } catch (e: Exception) {
                                showError("Erro ao processar resposta: ${e.message}")
                            }
                        }
                    }

                    override fun onFailure(call: Call<GitHubUploadResponse>, t: Throwable) {
                        showLoading(false)
                        showError("Falha na rede: ${t.message}")
                        Log.e("GitHubDebug", "Falha na requisição", t)
                    }
                })
            }
        } catch (e: Exception) {
            showLoading(false)
            showError("Erro durante o upload: ${e.message}")
            Log.e("GitHubDebug", "Erro durante upload", e)
        }
    }

    private fun showLoading(show: Boolean) {
        binding.progressBar.visibility = if (show) View.VISIBLE else View.GONE
        binding.buttonUpload.isEnabled = !show
        binding.buttonSelectFile.isEnabled = !show
    }

    private fun showError(message: String) {
        binding.textViewResult.text = "❌ $message"
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    }

    override fun onDestroy() {
        super.onDestroy()
        tempFile?.delete()
    }
}







plugins {
    id("com.android.application")
    id("kotlin-android")
}

android {
    namespace = "com.example.gith"
    compileSdk = 33
    
    defaultConfig {
        applicationId = "com.example.gith"
        minSdk = 21
        targetSdk = 33
        versionCode = 1
        versionName = "1.0"
        
        vectorDrawables { 
            useSupportLibrary = true
        }
    }
    
    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.10.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.9.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    
    // Retrofit
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.9.3")
    
    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
    
    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.1")
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.google.code.gson:gson:2.8.9")
    
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.9.1")
    implementation("com.google.android.material:material:1.4.0")
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.9.1")
    implementation("com.google.android.material:material:1.4.0")
    implementation("androidx.security:security-crypto:1.1.0-alpha06")
}




com proguard


plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-parcelize")
}

android {
    namespace = "com.example.gith"
    compileSdk = 33
    
    defaultConfig {
        applicationId = "com.example.gith"
        minSdk = 21
        targetSdk = 33
        versionCode = 1
        versionName = "1.0"
        
        vectorDrawables { 
            useSupportLibrary = true
        }
        
        buildConfigField("String", "API_BASE_URL", "\"https://api.github.com/\"")
    }
    
    signingConfigs {
        create("release") {
            // Configuração do keystore - ajuste os caminhos e senhas
            storeFile = file("keystore/killerkingMDgith.keystore")
            storePassword = "Modder" // Substitua pela sua senha
            keyAlias = "killerkingMDgith"     // Substitua pelo seu alias
            keyPassword = "Modder"  // Substitua pela sua senha
        }
        
        getByName("debug") {
            storeFile = file("debug.keystore")
            storePassword = "android"
            keyAlias = "androiddebugkey"
            keyPassword = "android"
        }
    }
    
    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
            signingConfig = signingConfigs.getByName("release")
        }
        
        debug {
            signingConfig = signingConfigs.getByName("debug")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
    
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    // Core Android
    implementation("androidx.core:core-ktx:1.10.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.9.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    
    // Retrofit & Networking
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.9.3")
    
    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
    
    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.1")
    
    // Security
    implementation("androidx.security:security-crypto:1.1.0-alpha06")
    implementation("org.bouncycastle:bcpkix-jdk15on:1.70")
    implementation("org.conscrypt:conscrypt-android:2.5.2")
    
    
    // Removi as duplicações que estavam no seu arquivo original
}